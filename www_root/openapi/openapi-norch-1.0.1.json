{
  "openapi": "3.0.1",
  "info": {
    "title": "Norch",
    "description": "This is the API documentation for `norch@1.0.1`. You can use this page to get familiar with what Norch can do. In order to actually run the queries, spin up your own server on `http://localhost:3030` using `npx norch`",
    "contact": {
      "email": "fergus@norch.io"
    },
    "version": "1.0.1"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "localhost:3030/API",
      "description": "Local development server"
    },
    {
      "url": "/API",
      "description": "Use if browsing these docs on an existing Norch server"
    }
  ],
  "tags": [
    {
      "name": "WRITE",
      "description": "Write to index"
    },
    {
      "name": "READ",
      "description": "Read from index"
    },
    {
      "name": "DELETE",
      "description": "Delete from index"
    }
  ],
  "components": {
    "parameters": {
      "Buckets": {
        "in": "query",
        "name": "BUCKETS",
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "description": "Describes one or many BUCKETs"
      },
      "Documents": {
        "in": "query",
        "name": "DOCUMENTS",
        "schema": {
          "type": "boolean"
        },
        "default": false,
        "description": "Attach document to result"
      },
      "Facets": {
        "in": "query",
        "name": "FACETS",
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "description": "Describes one or many FACETs"
      },
      "Ids": {
        "name": "ID",
        "in": "query",
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Id"
          }
        },
        "description": "One or many Ids, each of which describes a document"
      },
      "Limit": {
        "name": "LIMIT",
        "in": "query",
        "schema": {
          "type": "number",
          "default": 10
        },
        "description": "Limits the amount of results returned"
      },
      "Page": {
        "name": "PAGE",
        "in": "query",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "NUMBER": {
                  "type": "integer"
                },
                "SIZE": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "default": {
          "NUMBER": 0,
          "SIZE": 20
        },
        "description": "Pagination"
      },
      "Score": {
        "in": "query",
        "name": "SCORE",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "TYPE": {
                  "type": "string",
                  "default": "TFIDF"
                }
              }
            }
          }
        },
        "description": "TODO: can sort also be boolean `true`?\nScoring schemes:\n * `CONCAT` - Concatenate values together\n * `PRODUCT` - Multiply values together\n * `SUM` - Add values up\n * `TFIDF` - Determine TFIDF score\n * `VALUE` - Set score to be the value itself\n\nYou can also optionally specify an array of FIELDs to score on:\n```javascript\n// EXAMPLE: specify fields to score on\n{\n  TYPE: 'CONCAT',\n  FIELDS: [ 'lat', 'lon' ]\n}\n```\n"
      },
      "Sort": {
        "in": "query",
        "name": "SORT",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "TYPE": {
                  "type": "string",
                  "default": "NUMERIC"
                },
                "DIRECTION": {
                  "type": "string",
                  "enum": ["ASCENDING", "DESCENDING"],
                  "default": "DESCENDING"
                },
                "FIELD": {
                  "type": "string",
                  "default": "_score"
                }
              }
            }
          }
        },
        "description": "Describes how the results will be sorted"
      },
      "TokenSpace": {
        "name": "TOKENSPACE",
        "in": "query",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Token"
            }
          }
        },
        "description": "Describes a single tokenspace"
      },
      "TokenSpaces": {
        "name": "TOKENSPACE",
        "in": "query",
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "description": "Describes one or many tokenspaces"
      },
      "Weight": {
        "in": "query",
        "name": "WEIGHT",
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "FIELD": {
                "type": "string"
              },
              "VALUE": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "WEIGHT": {
                "type": "number"
              }
            }
          }
        },
        "description": "Describes how the results will be weighted"
      }
    },
    "schemas": {
      "Document": {
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "Id": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "FIELD": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "VALUE": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "GTE": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "LTE": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  }
                }
              },
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      }
    }
  },
  "paths": {
    "/ALL_DOCUMENTS": {
      "get": {
        "tags": ["READ"],
        "summary": "Return all documents in the index",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of documents"
          }
        }
      }
    },
    "/BUCKETS": {
      "get": {
        "tags": ["READ"],
        "summary": "Aggregate documents into predefined buckets",
        "parameters": [
          {
            "$ref": "#/components/parameters/TokenSpaces"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of buckets"
          }
        }
      }
    },
    "/DELETE": {
      "delete": {
        "tags": ["DELETE"],
        "summary": "Delete specified documents by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/Ids"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted"
          }
        }
      }
    },
    "/DICTIONARY": {
      "get": {
        "tags": ["READ"],
        "summary": "Returns tokens described by TOKENSPACE",
        "description": "If no TOKENSPACE is described, return all tokens in index. DICTIONARY returns only the tokens, whereas DISTINCT returns field-token pairs",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/TokenSpace"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tokens"
          }
        }
      }
    },
    "/DISTINCT": {
      "get": {
        "tags": ["READ"],
        "summary": "Returns all field-token pairs in the given TOKENSPACE",
        "description": "If no TOKENSPACE is described, return all field-token pairs in the index. DICTIONARY returns only the tokens, whereas DISTINCT returns field-token pairs.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/TokenSpace"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of field-token pairs"
          }
        }
      }
    },
    "/DOCUMENTS": {
      "get": {
        "tags": ["READ"],
        "summary": "Returns all documents with the given ids",
        "parameters": [
          {
            "$ref": "#/components/parameters/Ids"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of documents"
          }
        }
      }
    },
    "/EXPORT": {
      "get": {
        "tags": ["READ"],
        "summary": "Dumps the index to text",
        "description": "See also IMPORT",
        "responses": {
          "200": {
            "description": "A dump of the index"
          }
        }
      }
    },
    "/FACETS": {
      "get": {
        "tags": ["READ"],
        "summary": "Aggregate documents into their distinct values",
        "description": "Take every unique field-value pair of a TOKENSPACE and return every document for which that field-value pair is present",
        "parameters": [
          {
            "$ref": "#/components/parameters/TokenSpaces"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of facets"
          }
        }
      }
    },
    "/FIELDS": {
      "get": {
        "tags": ["READ"],
        "summary": "Return all field names known to the index",
        "responses": {
          "200": {
            "description": "An array of field names"
          }
        }
      }
    },
    "/FLUSH": {
      "delete": {
        "tags": ["DELETE"],
        "summary": "Delete everything in the index",
        "responses": {
          "200": {
            "description": "Successfully deleted"
          }
        }
      }
    },
    "/IMPORT": {
      "post": {
        "tags": ["WRITE"],
        "summary": "Import an index",
        "requestBody": {
          "description": "An index dump to be imported (generate this dump using EXPORT)",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully imported"
          }
        }
      }
    },
    "/MAX": {
      "get": {
        "tags": ["READ"],
        "summary": "Get maximum value from the given TOKENSPACE",
        "parameters": [
          {
            "$ref": "#/components/parameters/TokenSpace"
          }
        ],
        "responses": {
          "200": {
            "description": "The maximum value"
          }
        }
      }
    },
    "/MIN": {
      "get": {
        "tags": ["READ"],
        "summary": "Get minimum value from the given TOKENSPACE",
        "parameters": [
          {
            "$ref": "#/components/parameters/TokenSpace"
          }
        ],
        "responses": {
          "200": {
            "description": "The minimum value"
          }
        }
      }
    },
    "/PUT": {
      "post": {
        "tags": ["WRITE"],
        "summary": "Add documents to the index",
        "requestBody": {
          "description": "An array of objects (documents). If objects contain a property called `_id` then that will be used to identify the document, if not then an `_id` field with be automatically assigned.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "caseSensitive",
            "schema": {
              "type": "boolean"
            },
            "default": true,
            "description": "index everything in a case-insensitive manner (lower case)"
          },
          {
            "in": "query",
            "name": "nGrams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "default": {
                    "lengths": [1],
                    "join": " ",
                    "fields": []
                  }
                }
              }
            },
            "description": "Property `lengths` describes the length of n\\-grams, `join` describes how they will be joined for indexing (`['one', 'two']` would be indexed as `'one two'` if `join: ' '`). `fields` is an array describing which fields to create n\\-grams on`\n"
          },
          {
            "in": "query",
            "name": "replace",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "default": {
                    "fields": [],
                    "values": {}
                  }
                }
              }
            },
            "description": "`fields` is an array that specifies the fields where replacements will happen, `values` is an array that specifies the tokens to be swapped in, for example: `{ values: { sheep: [ 'animal', 'livestock' ] } }`\n"
          },
          {
            "in": "query",
            "name": "skipField",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "default": [],
            "description": "These fields will not be searchable, but they will still be stored"
          },
          {
            "in": "query",
            "name": "stopwords",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "default": [],
            "description": "A list of words to be ignored when indexing"
          },
          {
            "in": "query",
            "name": "tokenSplitRegex",
            "schema": {
              "type": "string"
            },
            "default": "/[\\p{L}\\d]+/gu",
            "description": "The regular expression that splits strings into tokens"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully imported"
          }
        }
      }
    },
    "/PUT_RAW": {
      "post": {
        "tags": ["WRITE"],
        "summary": "Add documents to the index",
        "requestBody": {
          "description": "Adds a raw file that is not tokenized or indexed",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully written"
          }
        }
      }
    },
    "/QUERY": {
      "get": {
        "tags": ["READ"],
        "summary": "Query the index",
        "description": "Query objects can be composed of any combination of boolean verbs (AND, OR, NOT) combined with query options",
        "parameters": [
          {
            "in": "query",
            "name": "QUERY",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "default": {
                    "ALL_DOCUMENTS": -1
                  }
                }
              }
            },
            "description": "# Describes a QUERY\n\n#### ALL_DOCUMENTS\n\n```javascript\n// returns all documents. Use PAGE to limit how many you see\n{\n  ALL_DOCUMENTS: true\n}\n```\n\n#### AND\n\n```javascript\n// Boolean AND: Return results that contain all tokens\n{\n  AND: [ token1, token2, ... ]\n}\n```\n\n#### NOT\n\n```javascript\n{\n  INCLUDE: queryExpression1,\n  EXCLUDE: queryExpression2\n}\n```\n\n\n#### OR\n\n```javascript\n// Boolean OR: Return results that contain one or more tokens\n{\n  OR: [ token1, token2, ... ]\n}\n```\n\nQuery verbs can be nested to create powerful expressions:\n```javascript\n// Example: AND with a nested OR with a nested AND\n{\n  AND: [ token1, token2, {\n    OR: [ token3, {\n      AND: [ token4, token5 ]\n    }]\n  }]\n}\n```\n"
          },
          {
            "$ref": "#/components/parameters/Buckets"
          },
          {
            "$ref": "#/components/parameters/Documents"
          },
          {
            "$ref": "#/components/parameters/Facets"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Score"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Weight"
          }
        ],
        "responses": {
          "200": {
            "description": "A query result"
          }
        }
      }
    },
    "/SEARCH": {
      "get": {
        "tags": ["READ"],
        "summary": "Search the index",
        "description": "This is a utility endpoint equivalent to\n`?QUERY={AND:[\"search\",\"terms\"]}&SCORE=TFIDF&SORT=true`\n",
        "parameters": [
          {
            "in": "query",
            "name": "STRING",
            "schema": {
              "type": "string"
            },
            "description": "STRING is split on whitespace so that `?STRING=search terms` is\nequivalent to `?STRING={AND: ['search', 'terms']}`\n"
          },
          {
            "$ref": "#/components/parameters/Buckets"
          },
          {
            "$ref": "#/components/parameters/Documents"
          },
          {
            "$ref": "#/components/parameters/Facets"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Score"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Weight"
          }
        ],
        "responses": {
          "200": {
            "description": "A search result"
          }
        }
      }
    },
    "/STATUS": {
      "get": {
        "tags": ["READ"],
        "summary": "Display information about the index",
        "description": "Display information about the index",
        "responses": {
          "200": {
            "description": "Information about the index"
          }
        }
      }
    },
    "/READY": {
      "get": {
        "tags": ["READ"],
        "summary": "Is index ready?",
        "description": "Returns `{ READY: true }` when index is ready\n",
        "responses": {
          "200": {
            "description": "Index is ready"
          }
        }
      }
    }
  }
}
